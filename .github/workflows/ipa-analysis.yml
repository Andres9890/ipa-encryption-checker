name: IPA Encryption Analysis

on:
  repository_dispatch:
    types: [analyze-ipa]

jobs:
  analyze-ipa:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ipachecker-${{ hashFiles('.github/workflows/ipa-analysis.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-ipachecker-
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ipachecker requests
          
      - name: Create temp directory
        run: mkdir -p ./tmp/uploaded
          
      - name: Download IPA file from Cloudflare R2
        run: |
          # Download the IPA file from the pre-signed URL provided by CDN
          # client_payload is passed by the repository_dispatch event
          curl -L "${{ github.event.client_payload.file_url }}" -o ./tmp/uploaded/ipa_file.ipa

      - name: Upload IPA as an artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: ipa-file-${{ github.event.client_payload.file_id }}
         path: ./tmp/uploaded/ipa_file.ipa
         retention-days: 90

        
      - name: Run IPA analysis
        id: analysis
        run: |
          # Run ipachecker on uploaded IPA file
          echo "Analyzing IPA file with ipachecker"
          ipachecker "./tmp/uploaded/ipa_file.ipa" --json --output analysis_results.json --quiet
          
          # Check if analysis was successful
          if [ ! -f "analysis_results.json" ]; then
            echo "Error: Analysis failed to create results file"
            exit 1
          fi
          
          # Display results for logging
          echo "Analysis completed successfully!"
          cat analysis_results.json
        
      - name: Send results back to CDN
        if: always()
        run: |
          # Check if analysis was successful
          if [ -f "analysis_results.json" ]; then
            # Read the analysis results
            RESULTS=$(cat analysis_results.json)
            
            # Create the update payload
            cat > update_payload.json << EOF
          {
            "status": "completed",
            "success": true,
            "results": $RESULTS
          }
          EOF
          else
            # Create an error payload
            cat > update_payload.json << EOF
          {
            "status": "failed",
            "success": false,
            "error": "Analysis failed. Check GitHub Actions logs for details."
          }
          EOF
          fi
          
          # Send the results back to the CDN
          curl -X POST "https://ipacheck.fndres195.workers.dev/update/${{ github.event.client_payload.file_id }}" \
            -H "Content-Type: application/json" \
            -H "X-Upload-ID: ${{ github.event.client_payload.upload_id }}" \
            -d @update_payload.json

      - name: Upload analysis results as an artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
         name: analysis-results-${{ github.event.client_payload.file_id }}
         path: analysis_results.json
         retention-days: 90